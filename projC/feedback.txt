============================================
vis/result.rtx
05:29:12_Thursday_28_May_2015
============================================
Feedback:
Your program ("Nimsys.java") is submitted successfully. :) 
 
    Your program is compiled successfully :)
 
The following are few simple tests and their results.
However, it's your responsibility to test your program more extensively!
 
Note that the program input (including carriage returns) is not displayed
with the program output. The two streams are displayed separately.
 
============================================
Test for input file: in1
removeplayer
y
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
startgame 1,1,george,jadams
1
startgame 1,1,george,jadams
1
startgame 1,1,jadams,tom
1
startgame 1,1,tom,jmadison
1
rankings
exit
 
Expected results:                                                       Your results:
Welcome to Nim										Welcome to Nim

>Are you sure you want to remove all players? (y/n)					>Are you sure you want to remove all players? (y/n)

>											>
>											>
>											>
>											>
>											>
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: George Washington								Player 1: George Washington
Player 2: John Adams									Player 2: John Adams

1 stones left: *									1 stones left: *
George's turn - remove how many?							George's turn - remove how many?

Game Over										Game Over
John Adams wins!									John Adams wins!

>											>
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: George Washington								Player 1: George Washington
Player 2: John Adams									Player 2: John Adams

1 stones left: *									1 stones left: *
George's turn - remove how many?							George's turn - remove how many?

Game Over										Game Over
John Adams wins!									John Adams wins!

>											>
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: John Adams									Player 1: John Adams
Player 2: Thomas Jefferson								Player 2: Thomas Jefferson

1 stones left: *									1 stones left: *
John's turn - remove how many?								John's turn - remove how many?

Game Over										Game Over
Thomas Jefferson wins!									Thomas Jefferson wins!

>											>
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: Thomas Jefferson								Player 1: Thomas Jefferson
Player 2: James Madison									Player 2: James Madison

1 stones left: *									1 stones left: *
Thomas's turn - remove how many?							Thomas's turn - remove how many?

Game Over										Game Over
James Madison wins!									James Madison wins!

>100% | 01 games | James Madison							>100% | 01 games | James Madison
67%  | 03 games | John Adams								67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson							50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington							0%   | 02 games | George Washington

>											>
 
Your results seem to be CORRECT.  :)
 
============================================
Test for input file: in2
displayplayer
rankings
exit
 
Expected results:                                                       Your results:
Welcome to Nim										Welcome to Nim

>george,George,Washington,2 games,0 wins						>george,George,Washington,2 games,0 wins
jadams,John,Adams,3 games,2 wins							jadams,John,Adams,3 games,2 wins
jmadison,James,Madison,1 games,1 wins							jmadison,James,Madison,1 games,1 wins
tom,Thomas,Jefferson,2 games,1 wins							tom,Thomas,Jefferson,2 games,1 wins

>100% | 01 games | James Madison							>100% | 01 games | James Madison
67%  | 03 games | John Adams								67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson							50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington							0%   | 02 games | George Washington

>											>
 
Your results seem to be CORRECT.  :)
 
============================================
Test for input file: in3
createplayer lskywalker,Skywalker,Luke
addplayer lskywalker
addplayer lskywalker,Skywalker,Luke
exit
 
Expected results:                                                       Your results:
Welcome to Nim										Welcome to Nim

>'createplayer' is not a valid command.							>'createplayer' is not a valid command.

>Incorrect number of arguments supplied to command.					>Incorrect number of arguments supplied to command.

>											>
>											>
 
Your results seem to be CORRECT.  :)
 
============================================
(NOTE: This test is for the implmentation of AI player.
The output is not compared with any expected output here.
This test is just used to verify that your AI players are working)
 
Test for input file: in_aibasic
addaiplayer robot1,Smith,John
addaiplayer robot2,Smith,Jane
startgame 20,4,robot1,robot2
exit
 
Welcome to Nim

>
>
>
Initial stone count: 20
Maximum stone removal: 4
Player 1: John Smith
Player 2: Jane Smith

20 stones left: * * * * * * * * * * * * * * * * * * * *
John's turn - remove how many?

16 stones left: * * * * * * * * * * * * * * * *
Jane's turn - remove how many?

15 stones left: * * * * * * * * * * * * * * *
John's turn - remove how many?

11 stones left: * * * * * * * * * * *
Jane's turn - remove how many?

10 stones left: * * * * * * * * * *
John's turn - remove how many?

6 stones left: * * * * * *
Jane's turn - remove how many?

5 stones left: * * * * *
John's turn - remove how many?

1 stones left: *
Jane's turn - remove how many?

Game Over
John Smith wins!

>
============================================
(NOTE: This test is for victory guaranteed strategy of AI player
Test for input file: in_aivictory
removeplayer
y
addplayer lskywalker,Skywalker,Luke
addaiplayer artoo,D2,R2
startgame 30,5,artoo,lskywalker
1
2
3
4
1
rankings
exit
 
Expected results:                                                       Your results:
Welcome to Nim										Welcome to Nim

>Are you sure you want to remove all players? (y/n)					>Are you sure you want to remove all players? (y/n)

>											>
>											>
>											>
Initial stone count: 30									Initial stone count: 30
Maximum stone removal: 5								Maximum stone removal: 5
Player 1: R2 D2										Player 1: R2 D2
Player 2: Luke Skywalker								Player 2: Luke Skywalker

30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *		30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

25 stones left: * * * * * * * * * * * * * * * * * * * * * * * * *			25 stones left: * * * * * * * * * * * * * * * * * * * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

24 stones left: * * * * * * * * * * * * * * * * * * * * * * * *				24 stones left: * * * * * * * * * * * * * * * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

19 stones left: * * * * * * * * * * * * * * * * * * *					19 stones left: * * * * * * * * * * * * * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

17 stones left: * * * * * * * * * * * * * * * * *					17 stones left: * * * * * * * * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

13 stones left: * * * * * * * * * * * * *						13 stones left: * * * * * * * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

10 stones left: * * * * * * * * * *							10 stones left: * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

7 stones left: * * * * * * *								7 stones left: * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

3 stones left: * * *									3 stones left: * * *
R2's turn - remove how many?								R2's turn - remove how many?

1 stones left: *									1 stones left: *
Luke's turn - remove how many?								Luke's turn - remove how many?

Game Over										Game Over
R2 D2 wins!										R2 D2 wins!

>100% | 01 games | R2 D2								>100% | 01 games | R2 D2
0%   | 01 games | Luke Skywalker							0%   | 01 games | Luke Skywalker

>											>
 
Your results seem to be CORRECT.  :)
 
============================================
This test is for the implementation of the advanced Nim game.
Test for input file: in_advanced
removeplayer
y
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
startadvancedgame 5,george,jadams
2 2
4 1
1 1
5 1
startadvancedgame 7,george,jadams
4 1
2 2
6 2
1 1
5 1
startadvancedgame 9,jadams,tom
8 2
4 1
3 1
5 1
1 1
6 1
2 1
7 1
startadvancedgame 11,tom,jmadison
2 2
10 2
5 2
8 2
4 1
1 1
7 1
rankings
exit
 
Expected results:                                                       Your results:
Welcome to Nim										Welcome to Nim

>Are you sure you want to remove all players? (y/n)					>Are you sure you want to remove all players? (y/n)

>											>
>											>
>											>
>											>
>										      |	>'startadvancedgame' is not a valid command.
Initial stone count: 5								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*>					      <
Player 1: George Washington							      <
Player 2: John Adams								      <
										      <
5 stones left: <1,*> <2,*> <3,*> <4,*> <5,*>					      <
George's turn - which to remove?						      <
										      <
3 stones left: <1,*> <2,x> <3,x> <4,*> <5,*>					      <
John's turn - which to remove?							      <
										      <
2 stones left: <1,*> <2,x> <3,x> <4,x> <5,*>					      <
George's turn - which to remove?						      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,*>					      |	>'2' is not a valid command.
John's turn - which to remove?							      <

Game Over									      |	>'4' is not a valid command.
John Adams wins!								      <

>										      |	>'1' is not a valid command.
Initial stone count: 7								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*>			      <
Player 1: George Washington							      <
Player 2: John Adams								      <
										      <
7 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*>			      <
George's turn - which to remove?						      <

6 stones left: <1,*> <2,*> <3,*> <4,x> <5,*> <6,*> <7,*>			      |	>'5' is not a valid command.
John's turn - which to remove?							      <

4 stones left: <1,*> <2,x> <3,x> <4,x> <5,*> <6,*> <7,*>			      |	>'startadvancedgame' is not a valid command.
George's turn - which to remove?						      <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,*> <6,x> <7,x>			      |	>'4' is not a valid command.
John's turn - which to remove?							      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,*> <6,x> <7,x>			      |	>'2' is not a valid command.
George's turn - which to remove?						      <

Game Over									      |	>'6' is not a valid command.
George Washington wins!								      <

>										      |	>'1' is not a valid command.
Initial stone count: 9								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*>		      <
Player 1: John Adams								      <
Player 2: Thomas Jefferson							      <

9 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*>		      |	>'5' is not a valid command.
John's turn - which to remove?							      <

7 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,x> <9,x>		      |	>'startadvancedgame' is not a valid command.
Thomas's turn - which to remove?						      <

6 stones left: <1,*> <2,*> <3,*> <4,x> <5,*> <6,*> <7,*> <8,x> <9,x>		      |	>'8' is not a valid command.
John's turn - which to remove?							      <

5 stones left: <1,*> <2,*> <3,x> <4,x> <5,*> <6,*> <7,*> <8,x> <9,x>		      |	>'4' is not a valid command.
Thomas's turn - which to remove?						      <

4 stones left: <1,*> <2,*> <3,x> <4,x> <5,x> <6,*> <7,*> <8,x> <9,x>		      |	>'3' is not a valid command.
John's turn - which to remove?							      <

3 stones left: <1,x> <2,*> <3,x> <4,x> <5,x> <6,*> <7,*> <8,x> <9,x>		      |	>'5' is not a valid command.
Thomas's turn - which to remove?						      <

2 stones left: <1,x> <2,*> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x>		      |	>'1' is not a valid command.
John's turn - which to remove?							      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x>		      |	>'6' is not a valid command.
Thomas's turn - which to remove?						      <

Game Over									      |	>'2' is not a valid command.
Thomas Jefferson wins!								      <

>										      |	>'7' is not a valid command.
Initial stone count: 11								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,*> <11,*>   <
Player 1: Thomas Jefferson							      <
Player 2: James Madison								      <

11 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,*> <11,*>   |	>'startadvancedgame' is not a valid command.
Thomas's turn - which to remove?						      <

9 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,*> <11,*>    |	>'2' is not a valid command.
James's turn - which to remove?							      <

7 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,x> <11,x>    |	>'10' is not a valid command.
Thomas's turn - which to remove?						      <

5 stones left: <1,*> <2,x> <3,x> <4,*> <5,x> <6,x> <7,*> <8,*> <9,*> <10,x> <11,x>    |	>'5' is not a valid command.
James's turn - which to remove?							      <

3 stones left: <1,*> <2,x> <3,x> <4,*> <5,x> <6,x> <7,*> <8,x> <9,x> <10,x> <11,x>    |	>'8' is not a valid command.
Thomas's turn - which to remove?						      <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> <10,x> <11,x>    |	>'4' is not a valid command.
James's turn - which to remove?							      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> <10,x> <11,x>    |	>'1' is not a valid command.
Thomas's turn - which to remove?						      <

Game Over									      |	>'7' is not a valid command.
Thomas Jefferson wins!								      <

>100% | 02 games | Thomas Jefferson						      |	>0%   | 00 games | George Washington
50%  | 02 games | George Washington						      |	0%   | 00 games | John Adams
33%  | 03 games | John Adams							      |	0%   | 00 games | James Madison
0%   | 01 games | James Madison							      |	0%   | 00 games | Thomas Jefferson

>											>
 
Oops, your results seem to be INCORRECT.  :(
 
============================================
This test is for the victory guaranteed strategy for the advanced Nim game.
Your solution is correct if it outputs 100% winning ratios in all cases.
 
 
Invalid move detected!
Game state: [true, true, true, true, true, true, true, true, true]
The last move by the rival player: 
Your AI move:  is invalid
Test is terminated
============================================
src/NimPlayer.java
05:29:09_Thursday_28_May_2015
============================================
/* NimPlayer.java
 * This class manages players of the game
 * Author: James Kahn (391990)
 * Created on 18/4/15
 */

import java.util.*;
import java.io.*;

public class NimPlayer implements Serializable
{
  private String userName;

  // Note: Need to be able to edit these
  private String  givenName, familyName;

  // Note: need to be able to reset these
  private int gamesPlayed, gamesWon;

  // NimPlayer constructor
  //static public NimPlayer() {}

  /* Mutators */

  // Username setter
  public void setUserName(String inUname)
  {
    userName = inUname;
    return;
  }

  // Family name setter
  public void setFamName(String inFamName)
  {
    familyName = inFamName;
    return;
  }

  // Given name setter
  public void setGivenName(String inGivenName)
  {
    givenName = inGivenName;
    return;
  }

  // Reset game stats for player
  public void gamesReset()
  {
    gamesPlayed = 0;
    gamesWon = 0;
    return;
  }

  /* Accessors */

  // Username getter
  public String getUserName()
  {
    return userName;
  }

  // Family name getter
  public String getFamName()
  {
    return familyName;
  }

  // Given name getter
  public String getGivenName()
  {
    return givenName;
  }

  // Games played getter
  public int getGamesPlayed()
  {
    return gamesPlayed;
  }

  // Player information getter
  public void printInfo()
  {
    System.out.println
    (
      userName+","+
      givenName+","+
      familyName+","+
      gamesPlayed+" games,"+
      gamesWon+" wins"
    );
    return;
  }

  // Percentage of games won by player
  public int getPercentWon()
  {
    if ( gamesPlayed == 0 )
    {
      return 0;
    }

    // Need to be careful here since round can return 2 types dep. on input
    return Math.round( ((float)gamesWon/gamesPlayed) * 100 );
  }


  // Player returns how many stones to remove
  public int removeStone(Scanner numRev, int remStones, int maxRem)
  {
    return Integer.parseInt(numRev.nextLine());
  }




  // Game winning routine
  public void winGame()
  {
    gamesPlayed += 1;
    gamesWon += 1;
    System.out.println(givenName + " " + familyName + " wins!");
    return;
  }

  // Game losing routine (incase we need an action for losing games later)
  public void loseGame()
  {
    gamesPlayed += 1;
    return;
  }
}
============================================
src/Nimsys.java
05:29:09_Thursday_28_May_2015
============================================
/* Nimsys.java
 * This class controls the overall Nim game process
 * Author: James Kahn (391990)
 * Created on 18/4/15
 */

import java.util.*;
import java.io.*;

public class Nimsys
{
  /* repeatedly displays the remaining stones and asks the players to remove 
   * some stones until there are no stones left.
   * Finally, it prints the .Game over. message and the game winner.
   */

  // Player list
  static NimPlayer[] playerList = new NimPlayer[100];
  static String[] unameList = new String[100];

  // Scanner object to handle commands (only have one for whole program)
  static Scanner kb = new Scanner(System.in); 

  // Predefine game commands that can be entered
  enum Cmds
  {
    ADDPLAYER,
    ADDAIPLAYER,
    REMOVEPLAYER,
    EDITPLAYER,
    RESETSTATS,
    DISPLAYPLAYER,
    RANKINGS,
    STARTGAME,
    EXIT,
  }

  ////////////////////////////////////////////////////////////////////
  // Main method
  ////////////////////////////////////////////////////////////////////
  static public void main(String[] args)
  {
    String inputLine;
    Cmds inCmd;

    // Program has started, try to load saved game file
    try
    {
      ObjectInputStream readGame = new ObjectInputStream
        (new FileInputStream("players.dat"));

      // Then readObject the player list back in
      //System.out.println("Reading saved game file.");
      playerList = (NimPlayer[])readGame.readObject();
      unameList = (String[])readGame.readObject();
      //System.out.println("Read saved game file.");
      readGame.close();
    } catch (IOException noFile)
    {
      //System.out.println("No saved game file.");
    } catch (ClassNotFoundException noClass)
    {
      System.err.println("Readable class not found: "+noClass.getMessage());
    }


    // Print welcome message
    System.out.println("Welcome to Nim");

    // Start the command line
    cmdLoop: while (true)
    {
      System.out.print("\n>");
      // Bit unsure about this as it removes case sensitivity of commands
      // users can enter
      inputLine = kb.nextLine();
      String[] inputSplit = inputLine.split(" ");
      
      // Catch invalid commands (for my ease of use)
      try{
        inCmd = Cmds.valueOf(inputSplit[0].toUpperCase());
      } catch (IllegalArgumentException noCmd)
      {
        //System.err.println("Illegal command exception: "+noCmd.getMessage());
        System.err.println("'"+inputSplit[0]+"' is not a valid command.");
        //System.out.println(Arrays.asList(Cmds.values()));
        continue;
      }
      

      switch (inCmd)
      {

        // Add new player to list of players
        case ADDPLAYER:
        {
          try
          {
            // Split string on commas
            String[] newNames = inputSplit[1].split(",");
            //System.out.println("username: " + newNames[0]);
            //System.out.println("famname: " + newNames[1]);
            //System.out.println("firstname: " + newNames[2]);
            addPlayer(newNames[0],newNames[1],newNames[2],false);
          } catch (ArrayIndexOutOfBoundsException noIn)
          {
            //System.err.println("Not enough arguments exception: "+noIn.getMessage());
            System.err.println("Incorrect number of arguments supplied to command.");
          }
          break;
        }

        // Add new AI player to list of players
        case ADDAIPLAYER:
        {
          try
          {
            // Split string on commas
            String[] newNames = inputSplit[1].split(",");
            addPlayer(newNames[0],newNames[1],newNames[2],true);
          } catch (ArrayIndexOutOfBoundsException noIn)
          {
            //System.err.println("Not enough arguments exception: "+noIn.getMessage());
            System.err.println("Incorrect number of arguments supplied to command.");
          }
          break;
        }

        // Remove player from list of players
        case REMOVEPLAYER:
        {
          // Check whether user wants to remove one or all players
          if (inputSplit.length == 1)
          {
            // Confirm user wants to remove all players
            System.out.println("Are you sure you want to remove all players? (y/n)");
            String confirmation = kb.nextLine();
            if ( confirmation.equals("y") )
            {
              // Iterate through and remove all players
              for (int i =0; i<unameList.length; i++)
                {
                  if (unameList[i] != null)
                  {
                    removePlayer(unameList[i]);
                  }
                }
             }
          } else
          {
            removePlayer(inputSplit[1]);
          }

          // Re-sort list of players since it's been modified
          Arrays.sort(unameList, Comparator.nullsLast(Comparator.naturalOrder()));
          break;
        }

        // Edit a player's details
        case EDITPLAYER:
        {
          try
          {
            // Split string on commas
            String[] newNames = inputSplit[1].split(",");
            editPlayer(newNames[0],newNames[1],newNames[2]);
          } catch (ArrayIndexOutOfBoundsException noIn)
          {
            //System.err.println("Not enough arguments exception: "+noIn.getMessage());
            System.err.println("Incorrect number of arguments supplied to command.");
          }
          break;
        }

        // Reset a player's gameplay stats
        case RESETSTATS:
        {
          // Check whether user wants to reset stats of one or all players
          if (inputSplit.length == 1)
          {
            // Confirm user wants to reset all players stats
            System.out.println("Are you sure you want to reset all player statistics? (y/n)");
            String confirmation = kb.nextLine();
            if ( confirmation.equals("y") )
            {
              // Iterate through and remove all players
              for (int i =0; i<unameList.length; i++)
                {
                  if (unameList[i] != null)
                  {
                    resetStats(unameList[i]);
                  }
                }
             }
          } else
          {
            resetStats(inputSplit[1]);
          }
          break;
        }

        // Display player information
        case DISPLAYPLAYER:
        {
          // Check whether user wants to display one or all players
          if (inputSplit.length == 1)
          {
            // Iterate through and display all players
            // Since we sort the username list every time it's altered
            // iterating through here will print result in alphabetical order
            for (int i =0; i<unameList.length; i++)
              {
                if (unameList[i] != null )
                {
                  displayPlayer(unameList[i]);
                }
              }
          } else
          {
            displayPlayer(inputSplit[1]);
          }
          break;
        }

        // Print the current leaderboard
        case RANKINGS:
        {
          displayRankings();
          break;
        }
        case STARTGAME:
        {
          try
          {
            // Split option string on commas
            String[] gameOptions = inputSplit[1].split(",");
            playGame(
                Integer.parseInt(gameOptions[0]),
                Integer.parseInt(gameOptions[1]),
                gameOptions[2],
                gameOptions[3]
                );
          } catch (ArrayIndexOutOfBoundsException noIn)
          {
            //System.err.println("Not enough arguments exception: "+noIn.getMessage());
            System.err.println("Incorrect number of arguments supplied to command.");
          } catch (NumberFormatException e) {};
          break;
        }
        case EXIT:
        {
          System.out.println();

          // Program has ended, save game to file
          // We put this here so that if for some reason the write fails
          // the user can try to save the game again
          try
          {
            ObjectOutputStream saveGame = new ObjectOutputStream
              (new FileOutputStream("players.dat"));
            saveGame.writeObject(playerList);
            saveGame.writeObject(unameList);
            saveGame.close();
          } catch (IOException noFile)
          {
            System.out.println("Save game failed, try again.");
            break;
          }


          break cmdLoop;
        }

        default:
        {
          // Check if anything special needs to be done here
          break;
        }
        
      }

    }




  System.exit(0);
  //return;
  }


  ////////////////////////////////////////////////////////////////////
  // Method to add new player to the game
  ////////////////////////////////////////////////////////////////////
  static void addPlayer(String nickName,String lastName,String firstName,boolean isAI)
  {


    // Check player doesn't already exist (can maybe use binary search)
    if ( Arrays.asList(unameList).contains(nickName) )
    {
      System.out.println("The player already exists.");
    } else
    {
      // If not then add to player name list in first empty slot and then sort 
      // the list for when we need to display players
      for (int i=0; i<unameList.length; i++)
      {
        if (unameList[i] == null)
        {
          unameList[i] = nickName;
          Arrays.sort(unameList, Comparator.nullsLast(Comparator.naturalOrder()));
          break;
        }
      }

      // And create the actual player instance
      for (int i=0; i<playerList.length; i++)
      {
        if (playerList[i] == null)
        {
          if (isAI)
          {
          playerList[i] = new NimAIPlayer();
          } else
          {
            playerList[i] = new NimPlayer();
          }

          // Need to set initial values
          playerList[i].setUserName(nickName);
          playerList[i].setFamName(lastName);
          playerList[i].setGivenName(firstName);
          playerList[i].gamesReset();
          break;
        }
      }
    }

    return;
  }



  ////////////////////////////////////////////////////////////////////
  // Method to remove player from the game
  ////////////////////////////////////////////////////////////////////
  static void removePlayer(String remPlayer)
  {

    // Check player exists (can maybe use binary search)
    if ( Arrays.asList(unameList).contains(remPlayer) )
    {
      // Delete player instance
      for (int i=0; i<playerList.length; i++)
      {
        if (playerList[i] != null && playerList[i].getUserName().equals(remPlayer))
        {
          // Mark player ref as null, i.e. ready for garbage collection
          playerList[i] = null;
        }
      }

      // Delete player's name from username list and re-sort it
      int remIndex = Arrays.asList(unameList).indexOf(remPlayer);
      unameList[remIndex] = null;
    } else
    {
      System.out.println("The player does not exist.");
    }

    return;
  }


  ////////////////////////////////////////////////////////////////////
  // Method to edit player details
  ////////////////////////////////////////////////////////////////////
  static void editPlayer(String nickName, String lastName, String firstName)
  {

    // Check player exists (can maybe use binary search)
    if ( Arrays.asList(unameList).contains(nickName) )
    {
      // Edit player instance
      for (int i=0; i<playerList.length; i++)
      {
        if (playerList[i] != null && playerList[i].getUserName().equals(nickName))
        {
          playerList[i].setFamName(lastName);
          playerList[i].setGivenName(firstName);
        }
      }
    } else
    {
      System.out.println("The player does not exist.");
    }

    return;
  }


  ////////////////////////////////////////////////////////////////////
  // Method to reset player game stats
  ////////////////////////////////////////////////////////////////////
  static void resetStats(String resetPlayer)
  {

    // Check player exists (can maybe use binary search)
    if ( Arrays.asList(unameList).contains(resetPlayer) )
    {
      // Reset player instance gameplay stats
      for (int i=0; i<playerList.length; i++)
      {
        if (playerList[i] != null && playerList[i].getUserName().equals(resetPlayer))
        {
          playerList[i].gamesReset();
        }
      }
    } else
    {
      System.out.println("The player does not exist.");
    }

    return;
  }

  
  ////////////////////////////////////////////////////////////////////
  // Method to display player information
  ////////////////////////////////////////////////////////////////////
  static void displayPlayer(String dispPlayer)
  {

    // Check player exists (can maybe use binary search)
    if ( Arrays.asList(unameList).contains(dispPlayer) )
    {
      // Display player instance gameplay stats
      for (int i=0; i<playerList.length; i++)
      {
        if (playerList[i] != null && playerList[i].getUserName().equals(dispPlayer))
        {
          playerList[i].printInfo();
        }
      }
    } else
    {
      System.out.println("The player does not exist.");
    }

    return;
  }


  ////////////////////////////////////////////////////////////////////
  // Method to output current rankings
  ////////////////////////////////////////////////////////////////////
  static void displayRankings()
  {
    // Scoreboard will be a list of indexes of players in player list
    // -1 indicates an empty slot on the scoreboard
    int[] scoreBoard = new int[10];
    Arrays.fill(scoreBoard,-1);
    int curPlayerScore = 0;
    String curPlayerUname;
    int curBoardScore = 0;
    String curBoardUname;
    int curPlayerIndex = 0;
    int tempBoardIndex = 0;
    String scoreString;

    // Populate rankings board
    // Check each players scores, place in top ten if they're winning
    for (int i=0; i<playerList.length; i++)
    {
      if (playerList[i] == null)
      {
        continue;
      }

      // Get current players score and index
      curPlayerScore = playerList[i].getPercentWon();
      curPlayerIndex = i;


      // Run through scoreboard to see if player needs to be placed on it
      for (int j=0; j<scoreBoard.length; j++)
      {
        if ( scoreBoard[j] == -1 )
        {
          // Scoreboard slot is empty, place player on scoreboard
          scoreBoard[j] = curPlayerIndex;
          break;
        }

        // ScoreBoard entry is non-empty so get player's score and username
        curBoardScore = playerList[scoreBoard[j]].getPercentWon();
        curBoardUname = playerList[scoreBoard[j]].getUserName();
        curPlayerUname = playerList[curPlayerIndex].getUserName();

        if
        (
          ( curPlayerScore < curBoardScore ) ||
          ( ( curPlayerScore == curBoardScore ) &&
            ( curPlayerUname.compareTo(curBoardUname) > 0) )
        )
        {
          // Current player ranks lower than player on scoreboard or has same 
          // score but has a username that is after the current board player's 
          // alphabetically
          // Skip to next scoreboard entry
          continue;
        }

        // Current player needs to be placed on scoreboard here
        // Change current player to player that was in that place on the 
        // scoreboard, i.e. shift the rest of the players on the board down one 
        // slot
        tempBoardIndex = scoreBoard[j];
        scoreBoard[j] = curPlayerIndex;
        curPlayerIndex = tempBoardIndex;
        curPlayerScore = playerList[curPlayerIndex].getPercentWon();
      }

    }

    // Print scoreboard
    for (int j=0; j<scoreBoard.length; j++)
    {
      // Check if we've reached the end of the scoreboard
      if ( scoreBoard[j] == -1 )
      {
        break;
      }

      curBoardScore = playerList[scoreBoard[j]].getPercentWon();
      scoreString = curBoardScore + "%";

      System.out.printf
      (
        "%-5s| %02d games | " +
        playerList[scoreBoard[j]].getGivenName() +
        " " +
        playerList[scoreBoard[j]].getFamName() +
        "\n",
        scoreString, playerList[scoreBoard[j]].getGamesPlayed()
      );

    }

    return;
  }


  ////////////////////////////////////////////////////////////////////
  // Method to play a game
  ////////////////////////////////////////////////////////////////////
  static void playGame(int initStones, int upBound, String player1, String player2)
  {
    
    boolean player1Turn = true;
    NimGame curGame = new NimGame();
    int curTurn = 0;
    int maxRem = 0;


    // Check players exist
    if
    ( Arrays.asList(unameList).contains(player1) &&
      Arrays.asList(unameList).contains(player2)
    )
    {
      // If players exist initialise game and add them to game
      curGame.setStoneCount(initStones);
      curGame.setUpperBound(upBound);
      
      for (int i=0; i<playerList.length; i++)
      {
        if (playerList[i] == null)
        {
          continue;
        } else if (playerList[i].getUserName().equals(player1))
        {
          curGame.setPlayer1(i);
        } else if (playerList[i].getUserName().equals(player2))
        {
          curGame.setPlayer2(i);
        }
      }
    } else
    {
      System.out.println("One of the players does not exist.");
      //curGame = null;
      return;
    }


    // Print game info
    System.out.println();
    System.out.println("Initial stone count: "+curGame.getStoneCount());
    System.out.println("Maximum stone removal: "+curGame.getUpperBound());
    System.out.println
    (
      "Player 1: " + 
      playerList[curGame.getPlayer1()].getGivenName() +
      " " +
      playerList[curGame.getPlayer1()].getFamName()
    );
    System.out.println
    (
      "Player 2: " + 
      playerList[curGame.getPlayer2()].getGivenName() +
      " " +
      playerList[curGame.getPlayer2()].getFamName()
    );
    
    // Start the game
    while ( curGame.getStoneCount() > 0)
    {
      // Print stone count
      curGame.printStatus();

      // Give correct player their turn
      // Note that haveTurn returns true if turn was successful
      if (player1Turn)
      {
        System.out.print(playerList[curGame.getPlayer1()].getGivenName());
        System.out.println("'s turn - remove how many?");
        // Note the ! here.
        try
        {
          curTurn = playerList[curGame.getPlayer1()].removeStone
            (
             kb,
             curGame.getStoneCount(),
             curGame.getUpperBound()
             );
          player1Turn = !curGame.haveTurn(curTurn);
        } catch (NumberFormatException badNum)
        {
          System.err.println("Bad int exception: "+badNum.getMessage());
        }

      } else
      {
        System.out.print(playerList[curGame.getPlayer2()].getGivenName());
        System.out.println("'s turn - remove how many?");
        
        try
        {
          curTurn = playerList[curGame.getPlayer2()].removeStone
            (
             kb,
             curGame.getStoneCount(),
             curGame.getUpperBound()
             );
          player1Turn = curGame.haveTurn(curTurn);
        } catch (NumberFormatException badNum)
        {
          System.err.println("Bad int exception: "+badNum.getMessage());
        }
      }

    }


    // Game has finished, print game over message
    System.out.println();
    System.out.println("Game Over");
    // Print out winner
    if (player1Turn)
    {
      playerList[curGame.getPlayer1()].winGame();
      playerList[curGame.getPlayer2()].loseGame();
    } else
    {
      playerList[curGame.getPlayer2()].winGame();
      playerList[curGame.getPlayer1()].loseGame();
    }

    return;
  }

}
============================================
src/NimAIPlayer.java
05:29:09_Thursday_28_May_2015
============================================
/*
  NimAIPlayer.java
  
  This class is provided as a skeleton code for the tasks of 
  Sections 2.3, 2.4 and 2.5 in Project C. Add code (do NOT delete any) to it
  to finish the tasks. 
  
  Coded by: Jin Huang
  Modified by: Jianzhong Qi, 29/04/2015
*/

import java.util.*;

public class NimAIPlayer extends NimPlayer implements Testable {
  // you may further extend a class or implement an interface
  // to accomplish the task in Section 2.3  

  public NimAIPlayer() {
        
  }
  
  // Player returns how many stones to remove
  public int removeStone(Scanner numRev, int remStones, int maxRem)
  {
    for(int i=1; (i<=maxRem&&i<remStones) ; i++)
    {
      if ((remStones - i - 1)%(maxRem + 1) == 0)
      {
        //System.out.println("AI");
        return i;
      }
    }

    // AI couldn't find number which satisfies guaranteed win
    // Stall for time!
    return 1;
  }



  public String advancedMove(boolean[] available, String lastMove) {
    // the implementation of the victory
    // guaranteed strategy designed by you
    String move = "";
    
    return move;
  }
}
============================================
src/Testable.java
05:29:09_Thursday_28_May_2015
============================================
/*
  Testable.java
  
  This class is provided for auto-testing purpose. Do NOT change it. 
  
  Coded by: Jin Huang
  Modified by: Jianzhong Qi, 29/04/2015
*/

public interface Testable {
  public String advancedMove(boolean[] available, String lastMove);
}
============================================
src/NimGame.java
05:29:09_Thursday_28_May_2015
============================================
/* NimGame.java
 * This class manages game playing process
 * Author: James Kahn (391990)
 * Created on 18/4/15
 */

public class NimGame
{
  // Stone vars
  private int stoneCount, upperBound;

  // Player indexes
  private int player1, player2;

  // NimGame Constructor
  public NimGame() {}


  /* Mutators */

  // Stone Count setter
  public void setStoneCount(int initCount)
  {
    stoneCount = initCount;
    return;
  }

  // Upper bound setter
  public void setUpperBound(int initUpper)
  {
    upperBound = initUpper;
    return;
  }

  // Player 1 setter
  public void setPlayer1(int p1index)
  {
    player1 = p1index;
    return;
  }

  // Player 2 setter
  public void setPlayer2(int p2index)
  {
    player2 = p2index;
    return;
  }


  /* Accessors */

  // Stone Count getter
  public int getStoneCount()
  {
    return stoneCount;
  }

  // Upper bound getter
  public int getUpperBound()
  {
    return upperBound;
  }

  // Player 1 getter
  public int getPlayer1()
  {
    return player1;
  }

  // Player 2 getter
  public int getPlayer2()
  {
    return player2;
  }

  // Print current game status
  public void printStatus()
  {
    System.out.println();
    System.out.print(stoneCount+" stones left:");
    for (int i=0; i<stoneCount; i++)
    {
      System.out.print(" *");
    }
    System.out.println();

    return;
  }

  // Player turn sequence
  public boolean haveTurn(int numRev)
  {
    if ( (numRev<1) || (numRev>upperBound) || (numRev>stoneCount) )
    {
      System.out.println();
      if ( stoneCount < upperBound )
      {
        System.out.println("Invalid move. You must remove between 1 and "+stoneCount+" stones.");
      } else
      {
        System.out.println("Invalid move. You must remove between 1 and "+upperBound+" stones.");
      }

      return false;
    }

    stoneCount -= numRev;
    return true;
  }


}
